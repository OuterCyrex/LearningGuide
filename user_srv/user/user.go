// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: user.proto

package user

import (
	"context"

	"LearningGuide/user_srv/userProto"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChangePasswordRequest = userProto.ChangePasswordRequest
	CheckResponse         = userProto.CheckResponse
	CreateUserInfo        = userProto.CreateUserInfo
	DeleteUserRequest     = userProto.DeleteUserRequest
	EmailRequest          = userProto.EmailRequest
	Empty                 = userProto.Empty
	IdRequest             = userProto.IdRequest
	PageInfo              = userProto.PageInfo
	PasswordCheck         = userProto.PasswordCheck
	UpdateUserInfo        = userProto.UpdateUserInfo
	UserInfoResponse      = userProto.UserInfoResponse
	UserListResponse      = userProto.UserListResponse

	User interface {
		GetUserList(ctx context.Context, in *PageInfo, opts ...grpc.CallOption) (*UserListResponse, error)
		GetUserByEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		GetUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		CreateUser(ctx context.Context, in *CreateUserInfo, opts ...grpc.CallOption) (*UserInfoResponse, error)
		UpdateUser(ctx context.Context, in *UpdateUserInfo, opts ...grpc.CallOption) (*Empty, error)
		CheckPasswordInfo(ctx context.Context, in *PasswordCheck, opts ...grpc.CallOption) (*CheckResponse, error)
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*Empty, error)
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUserList(ctx context.Context, in *PageInfo, opts ...grpc.CallOption) (*UserListResponse, error) {
	client := userProto.NewUserClient(m.cli.Conn())
	return client.GetUserList(ctx, in, opts...)
}

func (m *defaultUser) GetUserByEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := userProto.NewUserClient(m.cli.Conn())
	return client.GetUserByEmail(ctx, in, opts...)
}

func (m *defaultUser) GetUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := userProto.NewUserClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUser) CreateUser(ctx context.Context, in *CreateUserInfo, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := userProto.NewUserClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUser) UpdateUser(ctx context.Context, in *UpdateUserInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := userProto.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUser) CheckPasswordInfo(ctx context.Context, in *PasswordCheck, opts ...grpc.CallOption) (*CheckResponse, error) {
	client := userProto.NewUserClient(m.cli.Conn())
	return client.CheckPasswordInfo(ctx, in, opts...)
}

func (m *defaultUser) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := userProto.NewUserClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultUser) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := userProto.NewUserClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}
